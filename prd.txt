### **제품 요구사항 문서 (PRD): MP3 편집기**

**1. 제품 개요 (Product Overview)**

*   **제품명:** MP3 편집기 (CLI 버전)
*   **목표:** 사용자가 커맨드 라인 인터페이스(CLI)를 통해 MP3 파일의 메타데이터(태그)와 오디오 데이터를 간편하게 편집할 수 있는 파이썬 스크립트를 개발한다.
*   **타겟 사용자:** 자신의 MP3 파일 컬렉션을 정리하고, 간단한 오디오 편집(자르기, 붙이기)을 원하는 사용자.

**2. 핵심 기능 (Core Features)**

*   **모드 선택:** 스크립트 실행 시 '태그 편집'과 '오디오 편집' 모드 중 하나를 선택할 수 있다.

*   **2.1. 태그 편집 모드 (기존 기능)**
    *   **태그 조회:** 제목, 아티스트, 앨범, 장르, 트랙 번호, 앨범 아트 조회.
    *   **태그 수정:** 텍스트 기반 태그 수정.
    *   **앨범 아트 수정:** 이미지 파일을 이용한 앨범 아트 변경.
    *   **저장:** 변경된 태그 정보를 원본 파일에 저장.

*   **2.2. 오디오 편집 모드 (신규 기능)**
    *   **기능 2.2.1: MP3 자르기 (Cut)**
        *   사용자는 대상 MP3 파일과 시작 시간, 종료 시간을 입력한다. (입력 형식: `MM:SS` 또는 초 단위)
        *   스크립트는 지정된 시간 구간만큼 오디오를 잘라내어 새로운 MP3 파일로 저장한다. (예: `original_cut.mp3`)
    *   **기능 2.2.2: MP3 붙이기 (Append)**
        *   사용자는 두 개의 MP3 파일(첫 번째 파일, 두 번째 파일)을 지정한다.
        *   스크립트는 첫 번째 파일 끝에 두 번째 파일을 이어 붙여 새로운 MP3 파일로 저장한다. (예: `merged_output.mp3`)

**3. 범위에서 제외되는 기능**

*   **고급 오디오 효과:** 페이드 인/아웃, 볼륨 조절, 노이즈 제거 등은 포함하지 않는다.
*   **GUI (그래픽 사용자 인터페이스):** CLI 환경에서만 동작한다.
*   **일괄 처리:** 여러 파일을 한 번에 자동 처리하는 기능은 포함하지 않는다.

**4. 사용자 시나리오**

1.  사용자는 터미널에서 스크립트를 실행한다. (예: `python mp3_editor.py`)
2.  스크립트는 사용자에게 원하는 작업 모드를 묻는다. (1: 태그 편집, 2: 오디오 편집)
3.  **시나리오 A: 태그 편집 선택**
    *   편집할 MP3 파일 경로를 입력받는다.
    *   기존과 동일한 태그 편집 프로세스를 진행한다.
4.  **시나리오 B: 오디오 편집 선택**
    *   다시 세부 작업을 묻는다. (1: 자르기, 2: 붙이기)
    *   **자르기 선택 시:**
        *   원본 파일 경로, 시작 시간, 종료 시간, 저장할 파일명을 입력받는다.
        *   작업 완료 후 결과 메시지를 출력한다.
    *   **붙이기 선택 시:**
        *   첫 번째 파일 경로, 두 번째 파일 경로, 저장할 파일명을 입력받는다.
        *   작업 완료 후 결과 메시지를 출력한다.

**5. 기술 요구사항**

*   **언어:** Python 3
*   **핵심 라이브러리:**
    *   `mutagen`: MP3 ID3 태그 처리
    *   `pydub`: 오디오 데이터 조작 (자르기, 붙이기)
*   **외부 의존성:** **FFmpeg** (pydub이 내부적으로 사용)
*   **실행 환경:** 표준 Python 실행 환경